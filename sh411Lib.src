////////////////////////////////////////
// <Section name>.
////////////////////////////////////////
// imported functions are named with _
// internal functions are named with __




////////////////////////////////////////
// Global scope variables and functions.
////////////////////////////////////////

_DEBUG = false

_DEBUG_LOG = function(debug_message)
    if _DEBUG == false then return
    print("<b>DEBUG:</b> " + debug_message)
end function

_ERROR = function(prefix, error_message)
    if not error_message then
        error_message = "<b>" + prefix.upper + "!</b>"
    else
        error_message = "<b>" + prefix.upper + ":</b> " + error_message
    end if
    exit error_message
end function

_ASSERT = function(expression, failure_message)
    if _DEBUG == false then return
    if expression != true then _ERROR("assertion error", failure_message)
end function

_NOT_IMPLEMENTED = function(message)
    _ERROR "not implemented error", message
end function


////////////////////////////////////////
// Auxiliary functions and variables.
////////////////////////////////////////

_local_shell = get_shell()
_local_computer = _local_shell.host_computer()

_Namespace = function()
    return {}
end function

_list_copy = function(l)
    new_l = []
    for i in l
        new_l.push(i)
    end for
    return new_l
end function

_to_number = function(str)
    return str.val()
end function


////////////////////////////////////////
// Functional programming toolkit.
////////////////////////////////////////

_head = function(xs)
    if xs.len() == 0 then return
    return xs[0]
end function

_tail = function(xs)
    if xs.len() == 0 then return []
    return xs[1:]
end function

_last = function(xs)
    if xs.len() == 0 then return
    return xs[-1]
end function

_init = function(xs)
    if xs.len() == 0 then return []
    return xs[:-1]
end function

_foldl = function(f, z, xs)
    if xs.len() == 0 then return z
    return _foldl(@f, f(z, _head(xs)), _tail(xs))
end function

_fmap = function(f, xs)
    aux = function(acc, x); return acc + [f(x)]; end function
    return _foldl(@aux, [], xs)
end function

_mapm = function(f, xs)
    aux = function(acc, x); f(x); end function
    return _foldl(@aux, null, xs)
end function

_find = function(n, xs)
    if xs.len() == 0 then return
    if n == _head(xs) then return n
    return _find(n, _tail(xs))
end function

_elem_index = function(n, xs)
    if xs.len() == 0 then return
    if n == _head(xs) then return 0
    return _elem_index(n, _tail(xs)) + 1
end function

_filter = function(p, xs)
    aux = function(acc, x); if p(x) == true then return acc + [x] else return acc; end function
    return _foldl(@aux, [], xs)
end function

_sum = function(xs)
    aux = function(acc, x); return acc + x; end function
    return _foldl(@aux, 0, xs)
end function

_concat = function(xs)
    aux = function(acc, x); if x isa list then return acc + x else return acc + [x]; end function
    return _foldl(@aux, [], xs)
end function

_sorted = function(xs)
    ys = _list_copy(xs)
    ys.sort()
    return ys
end function


////////////////////////////////////////
// Process Manipulation.
////////////////////////////////////////

_get_running_processes = function()
    aux = function(line)
        line = line.split(" ")
        user = line[0]
        pid = line[1].val()
        mem = line[2].remove("%").val()
        cpu = line[3].remove("%").val()
        name = line[4]
        return [user, pid, mem, cpu, name]
    end function

    return _fmap(@aux, _tail(_local_computer.show_procs().split(char(10))))
end function

_get_process_user = function(process)
    return process[0]
end function

_get_process_pid = function(process)
    return process[1]
end function

_get_process_cpu = function(process)
    return process[2]
end function

_get_process_mem = function(process)
    return process[3]
end function

_get_process_name = function(process)
    return process[4]
end function

_terminate = function(process)
    return _local_computer.close_program(_get_process_pid(process))
end function

_cpu_usage = function(processes)
    return _sum(_fmap(@_get_process_cpu, processes))
end function

_mem_usage = function(processes)
    return _sum(_fmap(@_get_process_mem, processes))
end function

_exists = function(process)
    processes = _get_running_processes()
    return not (_find(process, processes) == null)
end function


////////////////////////////////////////
// Implicit(Low-Level) control flow.
////////////////////////////////////////

// "allocates" memory and returns a pointer to it.
_malloc = function(object)
    dereference = function(value)
        if not value then return self._value[0]
        self._value[0] = value
    end function

    return {"_value": [object], "deref": @dereference}
end function


////////////////////////////////////////
// String functions.
////////////////////////////////////////

_qwerty_lower = "qwertyuiopasdfghjklzxcvbnm"
_qwerty_upper = _qwerty_lower.upper()
_qwerty_abc = _qwerty_lower + _qwerty_upper

_string_random = function(l)
    abc = _list_copy(_qwerty_abc)
	str = ""
	i = 0
	while i < l
		abc.shuffle()
		str = str + _head(abc)
		i = i + 1
	end while
	return str
end function

_format_phrase = function(phrase, count, character)
	if not character then character = " "
	if not count then count = phrase.len()
	// phrase to string convertion
	phrase = phrase + ""
	if phrase.len() < count then
		while phrase.len() < count
			phrase = phrase + character
		end while
	else if phrase.len() > count then
		while phrase.len() > count
			phrase = phrase.values()
			phrase[-1] = ""
			new_phrase = ""
			for char_ in phrase
				new_phrase = new_phrase + char_
			end for
			phrase = new_phrase
		end while
	end if
	return phrase + character
end function

_colour = function(text, color)
    return ["<color=", color, ">", text, "</color>"].join("")
end function

_bold = function(text)
    return ["<b>", text, "</b>"].join("")
end function

_underline = function(text)
    return ["<u>", text, "</u>"].join("")
end function

_italic = function(text)
    return ["<i>", text, "</i>"].join("")
end function


////////////////////////////////////////
// Exposing library functions into sh411 namespace.
////////////////////////////////////////

sh411 = {}

sh411.local_shell = @_local_shell
sh411.local_computer = @_local_computer
sh411.Namespace = @_Namespace
sh411.list_copy = @_list_copy
sh411.to_number = @_to_number

sh411.Declarative = {}
sh411.Declarative.head = @_head
sh411.Declarative.tail = @_tail
sh411.Declarative.last = @_last
sh411.Declarative.init = @_init
sh411.Declarative.foldl = @_foldl
sh411.Declarative.fmap = @_fmap
sh411.Declarative.mapm = @_mapm
sh411.Declarative.filter = @_filter
sh411.Declarative.sum = @_sum
sh411.Declarative.concat = @_concat
sh411.Declarative.find = @_find
sh411.Declarative.elem_index = @_elem_index
sh411.Declarative.sorted = @_sorted

sh411.Process = {}
sh411.Process.get_running_processes = @_get_running_processes
sh411.Process.user = @_get_process_user
sh411.Process.pid = @_get_process_pid
sh411.Process.cpu = @_get_process_cpu
sh411.Process.mem = @_get_process_mem
sh411.Process.name = @_get_process_name
sh411.Process.cpu_usage = @_cpu_usage
sh411.Process.mem_usage = @_mem_usage
sh411.Process.terminate = @_terminate
sh411.Process.exists = @_exists

sh411.Implicit = {}
sh411.Implicit.malloc = @_malloc

sh411.String = {}
sh411.String.qwerty_lower = @_qwerty_lower
sh411.String.qwerty_upper = @_qwerty_upper
sh411.String.qwerty_abc = @_qwerty_abc
sh411.String.random = @_string_random
sh411.String.format_phrase = @_format_phrase
sh411.String.colour = @_colour
sh411.String.bold = @_bold
sh411.String.underline = @_underline
sh411.String.italic = @_italic




////////////////////////////////////////
// Tests
////////////////////////////////////////

{"test": function()}//.test()
    // all the test code goes here
end function
