import_code("/home/sh411/sh411Lib.src")

// change that if you re debugging the program
// _DEBUG = true
_DEBUG = false

p = new sh411.Process
str = new sh411.String
fp = new sh411.Declarative

localShell = @sh411.localShell
localComputer = @sh411.localComputer
Namespace = @sh411.Namespace

_ = @str.colour




// constants
F_CHAR = "*"
F_COLOUR = "#808080"
TYPE_HELP_MESSAGE = "Press 'h' or '/' to see all available commands."

allProcesses = @p.getRunningProcesses

existingProcesses = function(processes)
    return fp.filter(@p.exists, processes)
end function

processToStr = function(process)
    name = str.formatPhrase(p.name(process), 20, F_CHAR)
    cpu = str.formatPhrase(str.toStr(p.cpu(process)), 6, F_CHAR)
    mem = str.formatPhrase(str.toStr(p.mem(process)), 6, F_CHAR)
    user = p.user(process)
    return [name, cpu, mem, user].join("")
end function


state = new Namespace

state.messages = [TYPE_HELP_MESSAGE, "This software is licensed under GPL v3. Press 'd' for more details."]
state.selected = []
state.selecting = 0

state.clear = function
    state.messages = []
    state.selected = []
    state.selecting = -1
end function

state.message = function(message)
    state.messages = state.messages + [message]
end function

state.showMessages = function
    _ASSERT state.messages isa list, "state.messages is not a list"
    if state.messages.len != 0 then
        fp.mapM @print, state.messages
        state.messages = []
    end if
end function


ui = new Namespace

ui.showHeader = function
    print "Hacktoria's Task Manager"
end function

ui.showProcess = function(process)
    processStr = processToStr(process)
    if state.selecting == fp.elemIndex(process, allProcesses) then processStr = str.underline(processStr)
    if fp.find(process, state.selected) != null then processStr = str.bold(processStr)
    print processStr.replace(F_CHAR, _(F_CHAR, F_COLOUR))
end function

ui.showProcesses = function(processes)
    print ["TASK NAME", " " * 12, "CPU", " " * 4, "MEM", " " * 4, "USER"].join("")
    fp.mapM @ui.showProcess, processes
    cpu = str.formatPhrase(str.toStr(p.cpu_usage(processes)), 6)
    mem = str.formatPhrase(str.toStr(p.mem_usage(processes)), 6)
    total = processes.len
    print ["CPU: ", cpu, "MEM: ", mem, "TOTAL: ", total].join("")
end function

ui.showAllProcesses = function
    return ui.showProcesses(allProcesses)
end function


help = new Namespace

help.main = "----------------------------------------
m       - Htop mode
g       - Guard mode
t       - Terminate
s       - Snapshot
a       - De/Select all
<Any>   - Refresh tasks
d       - Licensing details
q       - Quit Program"


menu = new Namespace

menu.guardMode = function(safeProcesses)
    guardMode = function(safeProcesses)
        runningProcesses = allProcesses
        if safeProcesses != runningProcesses then
            terminateLog = function(process)
                print "Terminated Process '" + p.name(process) + "' with status: " + p.terminate(process)
            end function

            p_ = function(x); return _find(x, safeProcesses) == null; end function
            unsafeProcesses = fp.filter(@p_, runningProcesses)
            fp.mapM @terminateLog, unsafeProcesses
        end if
        return guardMode(safeProcesses)
    end function

    clear_screen
    ui.showHeader
    print "Guard mode is running. Waiting for processes to appear..."

    return guardMode(safeProcesses)
end function

menu.htopMode = function
    state.clear

    clear_screen
    ui.showHeader
    ui.showAllProcesses
    
    state.showMessages

    wait 1/2; yield
    return menu.htopMode
end function




main = function
    clear_screen
    ui.showHeader
    ui.showAllProcesses
    
    if state.messages.len == 0 then print TYPE_HELP_MESSAGE
    state.showMessages

    input = user_input(char(0), false, true).trim.lower

    _ASSERT state.selected isa list, "state.selected is not a list"
    _ASSERT state.selecting isa number, "state.selecting is not a number"

    // quit program
    if input == "q" then
        exit "Thanks for using this program. See you soon!"
    
    // htop mode
    else if input == "m" then
        menu.htopMode
    
    // guard mode
    else if input == "g" then
        safeProcesses = existingProcesses(state.selected)
        if safeProcesses.len == 0 then
            state.message "ERROR: Select task/s first!"
        else
            return menu.guardMode(safeProcesses)
        end if

    // choose all processes
    else if input == "a" then
        if state.selected == allProcesses then
            state.selected = []
        else
            state.selected = allProcesses
        end if

    // show help message
    else if input == "h" or input == "/" then
        state.message help.main
    
    // show disclaimer message
    else if input == "d" then
        state.message "\nThis program comes with ABSOLUTELY NO WARRANTY; This is free software, and you are welcome to redistribute it under certain conditions; For more details please visit https://github.com/h4cktoria/task-manager"

    // terminate processes
    else if input == "t" then
        if existingProcesses(state.selected).len == 0 then
            state.message "ERROR: Select task/s first!"
        else
            p_ = function(x); return x isa string; end function
            state.messages = state.messages + fp.filter(@p_, fp.fmap(@p.terminate, existingProcesses(state.selected)))
            state.selected = []
            state.selecting = 0
        end if

    // snapshot taking
    else if input == "s" then
        if existingProcesses(state.selected).len == 0 then
            state.message "ERROR: Select task/s first!"
        else
            if not localComputer.File(current_path) then
                state.message "Could not find current_path..."
            else
                snapshotName = str.random(8) + ".shot"
                result = localComputer.touch(current_path, snapshotName)
                if result isa string then
                    state.message "Could not create snapshot file..."
                else
                    snapshotFile = localComputer.File(current_path + "/" + snapshotName)
                    snapshotContent = ["NAME", "PID", "CPU", "MEM", "USER"].join(" ")
                    f = function(process); outer.snapshotContent = snapshotContent + char(10) + process.join(" "); end function
                    fp.mapM @f, existingProcesses(state.selected)
                    snapshotFile.set_content format_columns(snapshotContent)
                    state.message "Snapshot '" + snapshotName + "' saved successfuly at '" + current_path + "'"
                end if
            end if
        end if
    
    // controls implementation
    else if input == "uparrow" then
        if state.selecting <= 0 then
            state.selecting = allProcesses.len - 1
        else
            state.selecting = state.selecting - 1
        end if
    else if input == "downarrow" then
        if state.selecting >= allProcesses.len - 1 then
            state.selecting = 0
        else
            state.selecting = state.selecting + 1
        end if
    else if input == "rightarrow" then
        if not state.selecting + 1 > allProcesses.len then
            selectedProcesses = allProcesses[state.selecting]
            if fp.find(selectedProcesses, state.selected) != null then
                state.selected.remove(fp.elemIndex(selectedProcesses, state.selected))
            else
                state.selected = state.selected + [selectedProcesses]
            end if
        else
            state.selecting = allProcesses.len - 1
        end if
    end if

    return main
end function; main
